{"ast":null,"code":"import _possibleConstructorReturn from \"C:\\\\JB\\\\gestion-inventario\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\JB\\\\gestion-inventario\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"C:\\\\JB\\\\gestion-inventario\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\JB\\\\gestion-inventario\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _classCallCheck from \"C:\\\\JB\\\\gestion-inventario\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\JB\\\\gestion-inventario\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { Subscriber } from '../Subscriber';\nexport function pairwise() {\n  return function (source) {\n    return source.lift(new PairwiseOperator());\n  };\n}\nvar PairwiseOperator = /*#__PURE__*/function () {\n  function PairwiseOperator() {\n    _classCallCheck(this, PairwiseOperator);\n  }\n  return _createClass(PairwiseOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new PairwiseSubscriber(subscriber));\n    }\n  }]);\n}();\nvar PairwiseSubscriber = /*#__PURE__*/function (_Subscriber) {\n  function PairwiseSubscriber(destination) {\n    var _this;\n    _classCallCheck(this, PairwiseSubscriber);\n    _this = _callSuper(this, PairwiseSubscriber, [destination]);\n    _this.hasPrev = false;\n    return _this;\n  }\n  _inherits(PairwiseSubscriber, _Subscriber);\n  return _createClass(PairwiseSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var pair;\n      if (this.hasPrev) {\n        pair = [this.prev, value];\n      } else {\n        this.hasPrev = true;\n      }\n      this.prev = value;\n      if (pair) {\n        this.destination.next(pair);\n      }\n    }\n  }]);\n}(Subscriber); //# sourceMappingURL=pairwise.js.map","map":null,"metadata":{},"sourceType":"module"}